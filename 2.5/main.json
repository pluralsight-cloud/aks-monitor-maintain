{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.33.93.31351",
      "templateHash": "8191494486042882652"
    }
  },
  "parameters": {
    "tenantId": {
      "type": "string",
      "defaultValue": "84f1e4ea-8554-43e1-8709-f0b8589ea118",
      "metadata": {
        "description": "The tenant ID for the Service Principal (Application), use the default value for the Sandbox"
      }
    },
    "applicationClientId": {
      "type": "string",
      "metadata": {
        "description": "The Client ID for the Service Principal (Application). Retrieve this value from the details of your Sandbox instance."
      }
    },
    "applicationClientSecret": {
      "type": "securestring",
      "metadata": {
        "description": "The Client Secret for the Service Principal (Application). Retrieve this value from the details of your Sandbox instance."
      }
    }
  },
  "variables": {
    "location": "[resourceGroup().location]",
    "osDiskSizeGB": 128,
    "agentCount": 1,
    "agentVMSize": "Standard_D2s_v3",
    "osTypeLinux": "Linux",
    "uniqueSuffix": "[uniqueString(resourceGroup().id)]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-10-01",
      "name": "law-default",
      "location": "[variables('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        }
      }
    },
    {
      "type": "Microsoft.Monitor/accounts",
      "apiVersion": "2023-10-01-preview",
      "name": "amw-default",
      "location": "[variables('location')]"
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2023-11-01-preview",
      "name": "[format('cr{0}', variables('uniqueSuffix'))]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "anonymousPullEnabled": true
      }
    },
    {
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2024-09-01",
      "name": "[format('aks-{0}', variables('uniqueSuffix'))]",
      "location": "[variables('location')]",
      "tags": {
        "displayname": "AKS Cluster"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "enableRBAC": true,
        "dnsPrefix": "[format('aks-{0}', variables('uniqueSuffix'))]",
        "agentPoolProfiles": [
          {
            "name": "syspool",
            "osDiskSizeGB": "[variables('osDiskSizeGB')]",
            "count": "[variables('agentCount')]",
            "vmSize": "[variables('agentVMSize')]",
            "osType": "[variables('osTypeLinux')]",
            "type": "VirtualMachineScaleSets",
            "mode": "System"
          }
        ]
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "ds-deploymentscript",
      "location": "[variables('location')]",
      "kind": "AzureCLI",
      "properties": {
        "forceUpdateTag": "1",
        "azCliVersion": "2.9.1",
        "environmentVariables": [
          {
            "name": "RG",
            "value": "[resourceGroup().name]"
          }
        ],
        "scriptContent": "    # Install kubectl\n    curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\n    chmod +x kubectl\n    mv kubectl /usr/local/bin/\n    AKS=$(az aks list --resource-group $RG --query [].name --output tsv)\n    ACR=$(az acr list --resource-group $RG --query [].name --output tsv)\n    ACR_LOGIN_SERVER=$(az acr show --name $ACR --query loginServer --output tsv)\n    # Build the Container Images\n    git clone https://github.com/WayneHoggett-ACG/GlobalmanticsBooks\n    cd GlobalmanticsBooks\n    cd api\n    az acr build --registry $ACR --image api:v1 .\n    cd ../web\n    az acr build --registry $ACR --image web:v1 .\n    # Connect to the AKS cluster\n    az aks get-credentials --resource-group $RG --name $AKS\n    # Create the Namespace and Application\n    kubectl create namespace globalmanticsbooks --save-config\n    kubectl create deployment web --image=$ACR_LOGIN_SERVER/web:v1 --namespace globalmanticsbooks --replicas=1 --port=80\n    kubectl create deployment api --image=$ACR_LOGIN_SERVER/api:v1 --namespace globalmanticsbooks --replicas=1 --port=5000\n    # Monitoring Configuration (No Grafana)\n    LAW_ID=$(az monitor log-analytics workspace list --resource-group $RG --output tsv --query [].id)\n    AMW_ID=$(az monitor account list --name 'amw-default' --resource-group $RG --output tsv --query id)\n    until [ \"$(az aks show -g $RG -n $AKS --query provisioningState -o tsv)\" == \"Succeeded\" ]; do sleep 10; done\n    az aks enable-addons --addon monitoring --name $AKS --resource-group $RG --workspace-resource-id $LAW_ID\n    until [ \"$(az aks show -g $RG -n $AKS --query provisioningState -o tsv)\" == \"Succeeded\" ]; do sleep 10; done\n    az aks update --enable-azure-monitor-metrics --name $AKS --resource-group $RG --azure-monitor-workspace-resource-id $AMW_ID\n    ",
        "supportingScriptUris": [],
        "timeout": "PT30M",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "PT1H"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.ContainerRegistry/registries', format('cr{0}', variables('uniqueSuffix')))]"
      ]
    }
  ]
}